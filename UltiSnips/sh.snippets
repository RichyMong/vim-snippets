priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"

def export_uppercase(line):
	import re
	return re.sub(r"(\S+)(?<==)", lambda x: x[1].upper().replace("-", "_"), line)

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #! "#!/usr/bin/env (!env)" b
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n" `
endsnippet

snippet sbash "safe bash options" b
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
`!p snip.rv ='\n\n' `
endsnippet

snippet temp "Tempfile" b
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0`echo \\n`${1/['"`](.+)['"`]/$1/}
endsnippet

snippet /ift(est)?/ "if ... then (if)" rb
if ${2:[ ${1:condition} ]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet if "if ... then (if)" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet func "function() {...}" b
${1:function} () {
	${0:${VISUAL}}
}
endsnippet

#################### ououmaia starts ####################

snippet alias "define an alias" b
alias ${1:aname}="${2:operation}"
endsnippet

snippet cd_or_return_error "chdir or print an error message and return 1" b
cd "${1:${dir}}" || {
	ouou_errormsg "Failed to chdir $1."
	return 1
}
endsnippet

snippet declare-array "declare an array" b
declare -a ${1:array}=()
endsnippet

snippet declare-dict "declare an associative array" b
declare -A ${1:dict}=()
endsnippet

# The cursor must also be set if the line is set.
post_jump "snip.buffer[snip.line] = export_uppercase(snip.buffer[snip.line]); snip.cursor.preserve()"
snippet export "export a variable" b
export ${1:var-name}=${2}
endsnippet

snippet func-getopt "getopt and eval args" b
	local -r args=$(getopt -o h${1:<short-options>} -l help,${2:<long-options>} -- "$@")

	# Set the positional parameters to the expansion of x, even if x expands
	# with a leading 'âˆ’' or '+'
	eval set -- "$args"
endsnippet

snippet /func[_-]?usage([_-]?err)?(or)?/ "echo function usage" br
echo "usage: ${FUNCNAME[0]} ${1:<args>}"
return `!p snip.rv = 1 if match.group(1) else 0`
endsnippet

snippet if_argc_error "error if argc doesn't meet the condition" b
if [[ $# -${1:lt} ${2:number} ]]; then
	echo "Usage: ${FUNCNAME[0]} ${3:<args>} ${4:[options]}"
	return 1
fi
endsnippet

snippet if_else "if ... then ... else" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
else
	${2}
fi
endsnippet

snippet if_help_func "if functon $1 is help" b
if [[ \$1 = "-h" ]] || [[ \$1 = "--help" ]]; then
	echo "Usage: ${FUNCNAME[0]} ${1:<args>} ${2:[options]}"
	return 0
fi
endsnippet

snippet if_help_script "if script $1 is help" b
if [[ \$1 = "-h" ]] || [[ \$1 = "--help" ]]; then
	echo "Usage: ${BASH_SOURCE[0]} ${1:<args>} ${2:[options]}"
	exit 0
fi
endsnippet

snippet if_which "if which xxx then" b
if which ${1:cmd} &>/dev/null; then
	${0:${VISUAL}}
fi
endsnippet

snippet /if[_-]?(g[te]|l[te]|eq|ne)/ "check $# with expected number" br
if [[ ${1:$#} -`!p snip.rv = match.group(1)` ${2:number} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet local-var "define a local variable" b
local ${1:var}
$1=${2}
endsnippet

# "i" enables in-word expansion
snippet path_dir "substitute to get diretory" i
${${1:path}%/*}
endsnippet

snippet path_stem "substitute to get filename" i
${${1:path}##*/}
endsnippet

snippet mapfile "mapfile from a command's output" b
mapfile -t ${0:array} < <(${1:cmd})
endsnippet

snippet readcmd "read from a command's output" b
while read -r ${1:var}; do
	${0:statement}
done < <(${2:cmd})
endsnippet

snippet sc-disable "disable a shellcheck rule" b
# shellcheck disable=SC${1:2139}
endsnippet

snippet sdir-symlink "script dir following symlink" b
SCRIPT_DIR="\$(dirname \$(readlink -f "\$0"))"
endsnippet

#################### ououmaia ends ####################

# vim:ft=snippets:
