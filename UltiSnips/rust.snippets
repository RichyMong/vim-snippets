#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet fn "fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet afn "async fn name(?) -> ? {}"
async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pafn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pri "print!(..)" b
print!("$1"${2/..*/, /}$2);
endsnippet

snippet pln "println!(..)" b
println!("$1"${2/..*/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet .it ".iter()" i
.iter()$0
endsnippet

snippet impl "Struct/Trait implementation" b
impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {
	${0}
}
endsnippet

# snippets by ououmania
snippet generic_func "define a generic function" b
fn ${1:name}<${2:T}>(${3}) ${4} {
}
endsnippet

snippet generic_func_where "define a generic function" b
fn ${1:name}<${2:T}>(${3}) -> ${4}
	where {
}
endsnippet

snippet generic_struct "define a generic struct" b
struct ${1:name}<${2:T}> {
}
endsnippet

snippet implf "Implement trait for struct" b
impl$3 ${1:Trait} for ${2:Type}${3:<${4:T}>} {
	${0}
}
endsnippet

snippet implst "Implement struct" b
impl ${1:} {
}
endsnippet

snippet lettp "Tuple declaration" b
let ${0:x} : (${1}, ${2}) = (${3}, ${4});
endsnippet

snippet letmr "Mutable reference" b
let ${0:r} = &mut ${1:v};
endsnippet

snippet letsf "String from" b
let ${0:s} = String::from(${1:"hello world"});
endsnippet

snippet letst "Declare a struct variable" b
let ${0:s} = ${1:Struct} {
	${VISUAL}$2
};
endsnippet

snippet match_all "match with all" b
match ${1} {
	${2} => ${3},
	_ => ${4},
}
endsnippet

snippet match_pattern "match with all" b
${1} => ${2},
endsnippet

snippet match_expr "match with an expression" b
${1} => ${2},
endsnippet

snippet match_block "match with a block" b
${1} => {
	${2}
}
endsnippet

snippet new "new of a type" b
let mut ${1:s} = ${2:T}::new();
endsnippet

snippet pfd "pub field" b
pub ${1:name}: ${2:type},
endsnippet

snippet stmem "Struct member declaration" b
	${1:name}: ${2:type},
endsnippet

snippet stmeth "struct method" b
fn ${1:function_name}(&self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet stmethp "pub struct method" b
pub fn ${1:function_name}(&self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet stemethm "struct mutable self method" b
fn ${1:function_name}(&mut self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet stemethmp "pub struct mutable self method" b
pub fn ${1:function_name}(&mut self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet string_from "string from a literal" b
let ${1:s} = String::from(${2});
endsnippet

# useless to have an immutable new
snippet string_new "string new" b
let mut ${1:s} = String::new();
endsnippet

snippet typedef "Type alias" b
type ${1:a} = ${2:b};
endsnippet

snippet useas "Use one as another" b
use ${1:one} as ${2:another};
endsnippet

snippet usestd "Use std" b
use std::${1};
endsnippet

snippet vec "define a vector" b
let ${1:v} = vec![${2}];
endsnippet

snippet vec_mut "define a mut vector" b
let mut ${1:v} = vec![${2}];
endsnippet

snippet vec_push "push to a vector" b
${1:vec}.push(${2:val});
endsnippet

# vim:ft=snippets:
