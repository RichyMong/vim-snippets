#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet fn "fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet afn "async fn name(?) -> ? {}"
async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pafn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pri "print!(..)" b
print!("$1"${2/..*/, /}$2);
endsnippet

snippet pln "println!(..)" b
println!("$1"${2/..*/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet .it ".iter()" i
.iter()$0
endsnippet

snippet impl "Struct/Trait implementation" b
impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {
	${0}
}
endsnippet

# snippets by ououmania
snippet implf "Implement trait for struct" b
impl$3 ${1:Trait} for ${2:Type}${3:<${4:T}>} {
	${0}
}
endsnippet

snippet implst "Implement struct" b
impl ${1:} {
}
endsnippet

snippet stfn0 "Struct fn with no parameter" b
fn ${1:function_name}(&self)${2/..*/ -> /}$2 {
	${VISUAL}$0
}
endsnippet

snippet stfnn "Struct fn with at least one parameter" b
fn ${1:function_name}(&self, $2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet typedef "Type alias" b
type ${1:a} = ${2:b};
endsnippet

snippet lettp "Tuple declaration" b
let ${0:x} : (${1}, ${2}) = (${3}, ${4});
endsnippet

snippet letmr "Mutable reference" b
let ${0:r} = &mut ${1:v};
endsnippet

snippet letsf "String from" b
let ${0:s} = String::from(${1:"hello world"});
endsnippet

snippet letst "Declare a struct variable" b
let ${0:s} = ${1:Struct} {
	${VISUAL}$2
};
endsnippet

snippet cmfun "Member function of struct" b
fn ${1:function_name}(&self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pcmfun "Member function of struct" b
pub fn ${1:function_name}(&self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet mfun "Mutable member function of struct" b
fn ${1:function_name}(&mut self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pmfun "Mutable member function of struct" b
pub fn ${1:function_name}(&mut self$2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet useas "Use one as another" b
use ${1:one} as ${2:another};
endsnippet

snippet usestd "Use std" b
use std::${1};
endsnippet

# vim:ft=snippets:
