priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile(r'[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

# ououmania
def find_method_args():
	"""
	find the method folling this line
	"""
	import re
	import vim
	mp = re.compile(r"^\s+(?:public|private)?\s*(?:[\w><.@]+)\s*\S*\w+\(([^()]*)\)")
	lineno = vim.current.window.cursor[0]
	for index, line in enumerate(vim.current.buffer[lineno:]):
		mm = mp.search(line)
		if not mm:
			continue
		word = re.compile(r'[a-zA-Z0-9><.]+\s+\w+')
		return [i.split(" ") for i in word.findall(mm.group(1))]
	return []

def guess_package_by_file(file=""):
	import os
	abs_path = os.path.realpath(file or path)
	package = os.path.dirname(abs_path)
	pattern = "src/main/java/"
	index = package.find(pattern)
	if index >= 0:
		package = package[index+len(pattern):]
	return ".".join(x for x in package.split(os.path.sep) if x)

def get_boxtype(base_type: str) -> str:
	if base_type == "int":
		return "Integer"
	if base_type == "char":
		return "Character"
	if base_type in ("boolean", "byte", "float", "long", "short", "double"):
		return base_type.capitalize()
	return base_type

def upper_final_var(line, expected_tabstop=1):
	import re
	if snip.tabstop != expected_tabstop:
		return line
	# We must use non-greedy here. look-behind not works since the pattern is
	# not fixed width.
	return re.sub(r"(\S+)(?=\s*=)", lambda x: x[1].upper().replace("-", "_"), line)

def wea_current_logger():
	import re
	import os
	buffer = vim.current.window.buffer
	if buffer:
		# The current logger defined by the class name or empty logger. But it
		# fails for inner classes
		pattern = re.compile(fr'final\s+Logger\s+(\w+)\s*=\s*LogManager.getLogger\s*\(\s*({snip.basename}\.class)?\s*\)')
		for line in buffer:
			m = pattern.search(line)
			if m:
				return m.group(1)
	return "LOGGER"

def wea_proptype(type_name):
	lower_name = type_name.lower()
	if lower_name.startswith("bool"):
		return "boolean"
	if lower_name in ("double", "float", "int", "long"):
		return lower_name

	if lower_name in ("string",):
		return lower_name.capitalize()
	return type_name

def wea_proptype_default(type_name):
	lower_name = type_name.lower()
	if lower_name.startswith("bool"):
		return "false"
	if lower_name in ("int", "long"):
		return "0"

	if lower_name in ("double", "float"):
		return ".0"

	if lower_name in ("string",):
		return ""
	return "null"

endglobal

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

snippet /i|n/ "new primitive or int" br
${1:int} ${2:i} = ${3:1};
$0
endsnippet

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1($3);
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

snippet ab "abstract" b
abstract $0
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break"
break;

endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet clc "class and constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet /Str?|str/ "String" br
String $0
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
	`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

snippet mt "method throws" b
${1|private,public|} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet m  "method" b
${1|private,public|} ${2:void} ${3:method}($4) {
	$0
}
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sy "synchronized"
synchronized $0
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet tt "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception }{
	$0
}
endsnippet

snippet th "throw" b
throw new $0
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

# added by ououmania - sorted by snippet names

snippet array "define a new array" b
T[] ${1:array} = new T[${2}]${3:`!p snip.rv = " {}" if not t[2] else ""`};
endsnippet

snippet author "author and date" b
/**
 * @author: `echo $USER`
 * @date: `date "+%Y/%m%d"`
 */
endsnippet

snippet /contains([kK]ey)?/ "check contains(Key)" br
if (${1:collection}.contains`!p snip.rv = "Key" if match.group(1) else ""`($2)) {
	${0:${VISUAL}}
}
endsnippet

post_jump "snip.buffer[snip.line] = upper_final_var(snip.buffer[snip.line], 4); snip.cursor.preserve()"
snippet ff "define final field(uppercase, '-' replaced by '_')" b
${1|private,public,protected|} ${5:static} final ${2:String} ${3:`!p snip.rv = t[2].upper()`} = ${4:value};
endsnippet

snippet /if[-_]?(not)?[-_]?null[-_]?(else)?/ "if null/not-null optional else" br
if (${1:var} `!p snip.rv = "!=" if match.group(1) else "=="` null) {
	${0:${VISUAL}}
}`!p snip.rv = " else {\n}" if match.group(2) else ""`
endsnippet

snippet /if[-_]?(not)?[-_]?(?:0|zero)[-_]?(else)?/ "if zero/non-zero optional else" br
if (${1:var} `!p snip.rv = "!=" if match.group(1) else "=="` 0) {
	${0:${VISUAL}}
}`!p snip.rv = " else {\n}" if match.group(2) else ""`
endsnippet

# auto-import works most of the time.
snippet i.j.i "import java.io." br
import java.io.${0:package};
endsnippet

snippet i.j.m "import java.math." i
import java.math.${0:package};
endsnippet

snippet i.j.u "import java.util."  i
import java.util.${0:stream}
endsnippet

snippet debug-enabled "if debug enabled" b
if (`!p snip.rv = wea_current_logger()`.isDebugEnabled()) {
	`!p snip.rv = snip.v.text if snip.v.text else wea_current_logger() + '.debug("");'`
}
endsnippet

snippet class-file "new file and class" b
package `!p snip.rv = guess_package_by_file()`;

/**
 * @author: `echo $USER`
 * @date: `date "+%Y/%m%d"`
 */
${1:public} class `!p snip.rv = snip.basename` {
	$0
}
endsnippet

snippet log4j-import "import log4j LogManager" b
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
endsnippet

snippet log4j-logger "define a log4j logger" b
private static Logger logger = LogManager.getLogger(`!p snip.rv = snip.basename`.class);
endsnippet

snippet map-new-concurrent "new ConcurrentMap" b
ConcurrentMap<${1:K}, ${2:V}> ${3:map} = new ConcurrentHashMap<>();
endsnippet

snippet doc-method "document an existing method" b
/**
 * ${7:Short Description}`!p
for i in find_method_args():
	snip.rv += "\n\t * @param " + i[1] + " "`
 **/
endsnippet

snippet new "new object" b
${1:Object} ${2:obj} = new $1($3);
endsnippet

snippet package "guess the current package" b
package `!p snip.rv = guess_package_by_file()`;
endsnippet

snippet /parse(\w+)/ "boxtype parse" ir
`!p snip.rv = get_boxtype(match.group(1)) + ".parse" + match.group(1).capitalize() + "()"`
endsnippet

snippet /parse(\w+)[-_]def/ "boxtype parse" ir
`!p snip.rv = match.group(1).lower()` ${1:var} = `!p snip.rv = get_boxtype(match.group(1)) + ".parse" + match.group(1).capitalize() + "()"`;
endsnippet

snippet /(protobuf|pb)-import "import protobuf message" b
import com.google.protobuf.Message;
endsnippet

snippet sb "string builder" b
StringBuilder ${1:sb} = new StringBuilder($2);
endsnippet

snippet sf "string format" b
String.format("${1:fmt}", ${2:args});
endsnippet

# snip.basename: The current filename with the extension removed.
snippet singleton "define a singleton class with an instance holder" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
	public static $1 getInstance() {
		return InstanceHolder.INSTANCE;
    }

	static private class InstanceHolder {
		public static $1 INSTANCE = new $1();
	}
}
endsnippet

snippet try-with "try clause with resource" b
try(${1:var} = ${2:expression}) {
	${3}
}
endsnippet

snippet /wea[-_]?(debug|error|info|warn)/ "log use the class logger" br
`!p snip.rv = wea_current_logger()`.`!p snip.rv = match.group(1)`("$1", $2);
endsnippet

snippet /wea[-_]?my(debug|error|info|warn)/ "ououmania log use the class logger" br
`!p snip.rv = wea_current_logger()`.`!p snip.rv = match.group(1)`("[ououmania] $1", $2);
endsnippet

snippet /wea[-_]?(real)?prop[-_]?(\w+)/ "wea property reader" br
`!p snip.rv = wea_proptype(match.group(2))` ${1:var} = PropertyFileReader.get`!p snip.rv = ("RealTime" if match.group(1) else "") + camel(wea_proptype(match.group(2)))`Item("${2:name}", ${3:`!p snip.rv = wea_proptype_default(match.group(2))`});
endsnippet

snippet /wea[-_]?check[-_]?real[-_]?(prop[-_])?(\w+)/ "wea property reader" br
if (PropertyFileReader.getRealTime`!p snip.rv = camel(wea_proptype(match.group(2)))`Item("${2:name}", ${3:`!p snip.rv = wea_proptype_default(match.group(2))`}) != $3) {
	${0:${VISUAL}}
}
endsnippet

snippet wea-millis "currentTimeMillis" w
Framework.currentTimeMillis()
endsnippet

snippet wea-rpc "define rpc req and make the call" b
Ss${1:Gamesvr}.Rpc${2}Req.Builder rpc$2Req = Ss$1.Rpc$2Req.newBuilder();
try {
	RpcResult<Ss$1.Rpc$2Res.Builder> rpcResult = `!p snip.rv = t[1].removesuffix('svr')`Service.get()
		.rpc$2(rpc$2Req);
	if (rpcResult.isOK()) {
		${3}
	}
} catch (RpcException | NKTimeoutException e) {
	`!p snip.rv = wea_current_logger()`.error("$2 failed, e:{}", e);
}
endsnippet

snippet wea-runjob "run job" b
	try {
		CurrentExecutorUtil.runJob(() -> {
			${1}
		}, ${2:"jobname"}, ${3|false,true|});
	} catch (NKCheckedException e) {
		${4}
	}
endsnippet

snippet wea-throw "NKErrorCode throwError" b
NKErrorCode.${1:UnknownError}.throwError("$2");
endsnippet

# end added by ououmania

# vim:ft=snippets:
